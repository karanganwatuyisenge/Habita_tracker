class GoalModel extends ChangeNotifier {
  String goalName = '';
  String startDate = '';
  String endDate = '';

  void setGoalName(String name) {
    goalName = name;
    notifyListeners();
  }

  void setStartDate(String date) {
    startDate = date;
    notifyListeners();
  }

  void setEndDate(String date) {
    endDate = date;
    notifyListeners();
  }
}


@override
Widget build(BuildContext context) {
  final goalModel = GoalModel();

  return ChangeNotifierProvider(
    create: (context) => goalModel,
    child: AlertDialog(
      // your existing widget code
    ),
  );
}


void SaveGoal(BuildContext context) async {
  // get the instance of GoalModel from the context
  final goalModel = Provider.of<GoalModel>(context, listen: false);

  var selectStartingDate = DateTime.now();
  var selectStartDate = DateFormat('yyyy-MM-dd').format(DateTime.now());
  if (_formKey.currentState!.validate()) {
    _formKey.currentState!.save();
    try {
      User user = auth.currentUser!;
      String? email = user.email;

      final userDocRef = await FirebaseFirestore.instance
          .collection('users')
          .where('email', isEqualTo: email)
          .limit(1)
          .get()
          .then((value) => value.docs.first.reference);

      // update the state of GoalModel
      goalModel.setGoalName(_goalNameController.text);
      goalModel.setStartDate(selectStartDate);
      goalModel.setEndDate(_selectEndDate.text);

      await userDocRef.collection('goals').add({
        'goalName': goalModel.goalName,
        'startDate': goalModel.startDate,
        'endDate': goalModel.endDate,
        'completed': false,
        'createdAt': DateTime.now(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('NewGoalSavedSuccessfully'.tr())));

      _goalNameController.clear();
      _selectEndDate.clear();

      Navigator.push(
          context, MaterialPageRoute(builder: (context) => HomePage()));
    } catch (e) {
      print('Error Saving Data: Se');
    }
  }
}

@override
Widget build(BuildContext context) {
  // get the instance of GoalModel from the context
  final goalModel = Provider.of<GoalModel>(context);

  // your existing widget code
  TextFormField(
    controller: _goalNameController,
    decoration: InputDecoration(
      labelText: 'YourGoalName'.tr(),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10),
      ),
    ),
    validator: (value) {
      if (value?.isEmpty ?? true) {
        return 'PleaseEnterYourGoal'.tr();
      }
      return null;
    },
    onChanged: (value) {
      // update the state of GoalModel
      goalModel.setGoalName(value);
    },
  ),

  TextFormField(
    readOnly: true,
    decoration: InputDecoration(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      labelText: goalModel.startDate,
    ),
  ),

  TextFormField(
    controller: _selectEndDate,
    decoration: InputDecoration(
      border:
