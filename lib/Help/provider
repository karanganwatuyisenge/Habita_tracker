class GoalModel extends ChangeNotifier {
  String goalName = '';
  String startDate = '';
  String endDate = '';

  void setGoalName(String name) {
    goalName = name;
    notifyListeners();
  }

  void setStartDate(String date) {
    startDate = date;
    notifyListeners();
  }

  void setEndDate(String date) {
    endDate = date;
    notifyListeners();
  }
}


@override
Widget build(BuildContext context) {
  final goalModel = GoalModel();

  return ChangeNotifierProvider(
    create: (context) => goalModel,
    child: AlertDialog(
      // your existing widget code
    ),
  );
}


void SaveGoal(BuildContext context) async {
  // get the instance of GoalModel from the context
  final goalModel = Provider.of<GoalModel>(context, listen: false);

  var selectStartingDate = DateTime.now();
  var selectStartDate = DateFormat('yyyy-MM-dd').format(DateTime.now());
  if (_formKey.currentState!.validate()) {
    _formKey.currentState!.save();
    try {
      User user = auth.currentUser!;
      String? email = user.email;

      final userDocRef = await FirebaseFirestore.instance
          .collection('users')
          .where('email', isEqualTo: email)
          .limit(1)
          .get()
          .then((value) => value.docs.first.reference);

      // update the state of GoalModel
      goalModel.setGoalName(_goalNameController.text);
      goalModel.setStartDate(selectStartDate);
      goalModel.setEndDate(_selectEndDate.text);

      await userDocRef.collection('goals').add({
        'goalName': goalModel.goalName,
        'startDate': goalModel.startDate,
        'endDate': goalModel.endDate,
        'completed': false,
        'createdAt': DateTime.now(),
      });

      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('NewGoalSavedSuccessfully'.tr())));

      _goalNameController.clear();
      _selectEndDate.clear();

      Navigator.push(
          context, MaterialPageRoute(builder: (context) => HomePage()));
    } catch (e) {
      print('Error Saving Data: Se');
    }
  }
}

@override
Widget build(BuildContext context) {
  // get the instance of GoalModel from the context
  final goalModel = Provider.of<GoalModel>(context);

  // your existing widget code
  TextFormField(
    controller: _goalNameController,
    decoration: InputDecoration(
      labelText: 'YourGoalName'.tr(),
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10),
      ),
    ),
    validator: (value) {
      if (value?.isEmpty ?? true) {
        return 'PleaseEnterYourGoal'.tr();
      }
      return null;
    },
    onChanged: (value) {
      // update the state of GoalModel
      goalModel.setGoalName(value);
    },
  ),

  TextFormField(
    readOnly: true,
    decoration: InputDecoration(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(10),
      ),
      labelText: goalModel.startDate,
    ),
  ),

  TextFormField(
    controller: _selectEndDate,
    decoration: InputDecoration(
      border:

// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:easy_localization/easy_localization.dart';
// import 'package:firebase_auth/firebase_auth.dart';
// import 'package:flutter/material.dart';
// import 'package:intl/intl.dart';
// class WeeklyHabit extends StatefulWidget {
//   const WeeklyHabit({Key? key}) : super(key: key);
//
//   @override
//   State<WeeklyHabit> createState() => _WeeklyHabitState();
// }
//
// class _WeeklyHabitState extends State<WeeklyHabit> {
//   User user=FirebaseAuth.instance.currentUser!;
//   String? habitPeriod;
//   String dailyformat=DateFormat('yyyy-MM-dd').format(DateTime.now());
//   @override
//   Widget build(BuildContext context) {
//     DateTime now=DateTime.now();
//     int currentWeekDayOfMonth = now.weekday;
//     String formattedDate = '${DateFormat('yyyy-MM').format(DateTime.now())}-$currentWeekDayOfMonth';
//     String formattedNow=DateFormat('yyyy-MM-dd').format(DateTime.now());
//     return Scaffold(
//       body: StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(
//         stream:
//         FirebaseFirestore.instance
//             .collection('users')
//             .doc(user.uid)
//             .collection('habits')
//             .where('habitType', isEqualTo: 'Monthly')
//         //.where('completed.$formattedDate.dates', arrayContains: formattedNow)
//             .snapshots(),
//         builder: (context, streamSnapshot) {
//           //print("This is the index: $index");
//           if (streamSnapshot.connectionState == ConnectionState.waiting) {
//             return const Center(child: CircularProgressIndicator());
//           }
//           if (streamSnapshot.hasError) {
//             print(streamSnapshot.error);
//             return Center(
//                 child:
//                 Text("ThereIsAnError: ${streamSnapshot.error}".tr()));
//           } else if (streamSnapshot.hasData) {
//             var habits = streamSnapshot.data!.docs;
//
//             return habits.isEmpty
//                 ? Center(child: Text("NoHabitsYet".tr()))
//                 : SingleChildScrollView(
//               child: Column(
//                   children: habits.map((habit) {
//                     // int indexes = habits.indexOf(habit);
//                     int frequency=habit['habitFrequency'];
//                     int count=habit['completed.$formattedDate.count'];
//                     int remaining=frequency-count;
//                     double percentage = frequency == 0 || count == 0 ? 0.0 : count / frequency;
//                     return Padding(
//                       padding: const EdgeInsets.only(
//                           top: 12, left: 15, right: 15),
//                       child: Container(
//                         decoration: BoxDecoration(
//                           borderRadius: BorderRadius.circular(5),
//                           color: const Color(0xFFFBFBFB),
//                         ),
//                         child: Padding(
//                           padding: const EdgeInsets.only(
//                               left: 8.0, right: 8.0),
//                           child: Column(
//                             children: [
//                               ListTile(
//                                 contentPadding:
//                                 const EdgeInsets.symmetric(
//                                     vertical: 0),
//                                 title: Text(
//                                   "${habit['habitName']}",
//                                   style: const TextStyle(
//                                       color: Color(0xFF2F2F2F),
//                                       fontSize: 25),
//                                 ),
//                               ),
//                               ListTile(
//                                 contentPadding:
//                                 EdgeInsets.symmetric(vertical: 0),
//                                 title:LinearProgressIndicator(
//                                     minHeight: 15,
//                                     value: percentage,
//                                     backgroundColor: Colors.grey,
//                                     valueColor:
//                                     AlwaysStoppedAnimation<Color>(
//                                         Colors.deepOrangeAccent)),
//                               ),
//                               ListTile(
//                                 contentPadding:
//                                 EdgeInsets.symmetric(vertical: 0),
//                                 title: Text('$count From $frequency DaysTarget'.tr(),
//                                   style: TextStyle(
//                                     color: Color(0xFF2F2F2F),
//                                     fontSize: 20,
//                                   ),
//                                 ),
//                               ),
//                               ListTile(
//                                 contentPadding:
//                                 EdgeInsets.symmetric(vertical: 0),
//                                 title: Text('Remaining $remaining days',
//                                     style: TextStyle(
//                                         color: Color(0xFF2F2F2F),
//                                         fontSize: 20)),
//                               ),
//                               ListTile(
//                                   contentPadding:
//                                   const EdgeInsets.symmetric(
//                                       vertical: 0),
//                                   title: Text(
//                                     'Everyday'.tr(),
//                                     style: TextStyle(
//                                         color: Color(0xFFFF5C00),
//                                         fontSize: 20),
//                                   ),
//                                   trailing: Checkbox(
//                                     value: false,
//                                     onChanged: (bool? newValue) async {
//                                       final docRef = FirebaseFirestore
//                                           .instance
//                                           .collection("users")
//                                           .doc(user.uid)
//                                           .collection("habits")
//                                           .doc(habit.id);
//                                       final currentDate = DateTime.now();
//                                       DateTime dateTime = DateTime.now();
//                                       String formattedDate = DateFormat('yyyy-MM-dd').format(dateTime);
//                                       if (habit['habitType'] ==
//                                           "Weekly") {
//                                         DateTime now = DateTime.now();
//                                         int currentWeekDayOfMonth =
//                                             now.weekday;
//                                         habitPeriod =
//                                         '${DateFormat('yyyy-MM').format(DateTime.now())}-$currentWeekDayOfMonth';
//                                         try {
//                                           await docRef.update({
//                                             "completed.$habitPeriod.dates":
//                                             FieldValue.arrayUnion([
//                                               formattedDate.toString()
//                                             ]),
//                                             "completed.$habitPeriod.count":
//                                             newValue == true
//                                                 ? FieldValue
//                                                 .increment(1)
//                                                 : FieldValue
//                                                 .increment(-1),
//                                           });
//                                           //print("Update successful");
//                                         } catch (e) {
//                                           print(
//                                               "Error updating document: $e");
//                                         }
//                                       }
//                                       else if (habit['habitType'] ==
//                                           "Monthly") {
//                                         final yearMonth =
//                                         DateFormat('yyyy-MM').format(DateTime.now());
//                                         //print("yearMonth: $yearMonth");
//                                         try {
//                                           await docRef.update({
//                                             "completed.$yearMonth.dates":
//                                             FieldValue.arrayUnion([
//                                               formattedDate.toString()
//                                             ]),
//                                             "completed.$yearMonth.count":
//                                             newValue == true
//                                                 ? FieldValue
//                                                 .increment(1)
//                                                 : FieldValue
//                                                 .increment(-1),
//                                           });
//                                           //print("Update successful");
//                                         } catch (e) {
//                                           print(
//                                               "Error updating document: $e");
//                                         }
//                                       }
//                                       else if (habit['habitType'] ==
//                                           "Daily") {
//                                         final yearDaily =
//                                         DateFormat('yyyy-MM-dd')
//                                             .format(currentDate);
//                                         //print("yearMonth: $yearMonth");
//                                         try {
//                                           await docRef.update({
//                                             "completed.$yearDaily.dates":
//                                             FieldValue.arrayUnion([
//                                               formattedDate.toString()
//                                             ]),
//                                             "completed.$yearDaily.count":
//                                             newValue == true
//                                                 ? FieldValue
//                                                 .increment(1)
//                                                 : FieldValue
//                                                 .increment(-1),
//                                           });
//                                           //print("Update successful");
//                                         } catch (e) {
//                                           print(
//                                               "Error updating document: $e");
//                                         }
//                                       }
//                                     },
//                                   )),
//                             ],
//                           ),
//                         ),
//                       ),
//                     );
//                   }).toList()
//               ),
//             );
//
//           } else {
//             return const CircularProgressIndicator();
//           }
//         },
//       ),
//     );
//   }
// }

To mock the API response for the fetchCountries function and populate the dropdown with
the mocked data, you can modify the previous example as follows:

Create a mock implementation for the fetchCountries function that returns a mocked
 list of countries:
dart
Copy code
import 'package:your_app/models/country.dart'; // Replace with your Country model

Future<List<Country>> fetchCountriesMock() async {
  // Create a list of mocked countries
  List<Country> countries = [
    Country(name: 'Country 1', wikiDataId: '1'),
    Country(name: 'Country 2', wikiDataId: '2'),
    Country(name: 'Country 3', wikiDataId: '3'),
  ];

  return countries;
}
In this mock implementation, we create a list of mocked countries and
return it as the result of the fetchCountries function.

In your test, before pumping the widget, you can replace the original
fetchCountries function with the mock implementation:
dart
Copy code
import 'package:flutter_test/flutter_test.dart';
import 'package:your_app/firebase/firestore.dart'; // Replace with your
app's Firestore import

void main() {
  testWidgets('Dropdown Test', (WidgetTester tester) async {
    // Replace the original fetchCountries function with the mock implementation
    fetchCountries = fetchCountriesMock;

    // Build and pump your widget
    await tester.pumpWidget(YourWidget());

    // Let the widget initialize and populate the dropdown
    await tester.pumpAndSettle();

    // Verify the dropdown options
    expect(find.text('Country 1'), findsOneWidget);
    expect(find.text('Country 2'), findsOneWidget);
    expect(find.text('Country 3'), findsOneWidget);
  });
}
In the test above, we replace the original fetchCountries function with
the mock implementation fetchCountriesMock by assigning it to the fetchCountries variable.
This ensures that when your widget calls fetchCountries, it will use the mock implementation
instead.

Finally, when you pump the widget and let it initialize, the dropdown will be populated
with the mocked data, and you can verify the dropdown options accordingly.

Make sure to adjust the imports and variable
names (YourWidget, fetchCountries, Country) to match your specific codebase.